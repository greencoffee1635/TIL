# 메모리 제한 256MB

'''
요세푸스 문제

요세푸스 문제는 다음과 같다.
1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다.
이제 순서대로 K번째 사람을 제거한다.
한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다.
이 과정은 N명의 사람이 모두 제거될 때까지 계속된다.
원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다.
예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.

N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)

출력
예제와 같이 요세푸스 순열을 출력한다.

예제 입력 1 
7 3

예제 출력 1 
<3, 6, 2, 7, 5, 1, 4>
'''

# 1. 시간 초과
n, k = map(int, input().split())
queue = list(range(1, n+1))  # queue = [i for i in range(1, n+1)]
result = []

while queue:
    for _ in range(k-1):  # 1- k-1만큼 루프를 돌린다.
        alive = queue.pop(0)  # 2- 맨 앞의 값을 pop으로 제거
        queue.append(alive)  # 3- 동시에 pop한 값을 append
    kill = queue.pop(0)  # 4- k번째에는 가장 앞의 수를 pop으로 제거
    result.append(kill)  # 5- 제거한 값을 결과리스트에 추가

print('<'+', '.join(map(str, result))+'>')

'''
1 - [1, 2, 3, 4, 5, 6, 7]
2 - 1
3 - [2, 3, 4, 5, 6, 7, 1]

1 - [2, 3, 4, 5, 6, 7, 1]
2 - 2
3 - [3, 4, 5, 6, 7, 1, 2]
4 - 3
5 - [3]

1 - [4, 5, 6, 7, 1, 2]
2 - 4
3 - [5, 6, 7, 1, 2, 4]

1 - [5, 6, 7, 1, 2, 4]
2 - 5
3 - [6, 7, 1, 2, 4, 5]
4 - 6
5 - [3, 6]

1 - [7, 1, 2, 4, 5]
2 - 7
3 - [1, 2, 4, 5, 7]

1 - [1, 2, 4, 5, 7]
2 - 1
3 - [2, 4, 5, 7, 1]
4 - 2
5 - [3, 6, 2]

1 - [4, 5, 7, 1]
2 - 4
3 - [5, 7, 1, 4]

1 - [5, 7, 1, 4]
2 - 5
3 - [7, 1, 4, 5]
4 - 7
5 - [3, 6, 2, 7]

1 - [1, 4, 5]
2 - 1
3 - [4, 5, 1]

1 - [4, 5, 1]
2 - 4
3 - [5, 1, 4]
4 - 5
5 - [3, 6, 2, 7, 5]

1 - [1, 4]
2 - 1
3 - [4, 1]

1 - [4, 1]
2 - 4
3 - [1, 4]
4 - 1
5 - [3, 6, 2, 7, 5, 1]

1 - [4]
2 - 4
3 - [4]

1 - [4]
2 - 4
3 - [4]
4 - 4
5 - [3, 6, 2, 7, 5, 1, 4]
'''

# 2.
n, k = map(int, input().split())
queue = list(range(1, n+1))
index = 0  # kill
result = []

while queue:
    index += k-1  # 1- 제거할 index의 위치조정. # k-1까지는 유지 (k번째는 제거)
    if index >= len(queue):  # 2- index가 남은 queue의 크기보다 크면
        index %= len(queue)  # 3- index를 나머지로 바꾼다.(예외처리)
    result.append(queue.pop(index))  # 4- queue에서 해당 index를 pop으로 제거
    # 5- 제거한 값을 결과리스트에 추가

print('<'+', '.join(map(str, result))+'>')

'''
1 - 2
4 - 2
5 - [3]

1 - 4
4 - 4
5 - [3, 6]

1 - 6
2 - 6
3 - 1
4 - 1
5 - [3, 6, 2]

1 - 3
4 - 3
5 - [3, 6, 2, 7]

1 - 5
2 - 5
3 - 2
4 - 2
5 - [3, 6, 2, 7, 5]

1 - 4
2 - 4
3 - 0
4 - 0
5 - [3, 6, 2, 7, 5, 1]

1 - 2
2 - 2
3 - 0
4 - 0
5 - [3, 6, 2, 7, 5, 1, 4]
'''

# 3. deque 사용
from collections import deque

n, k = map(int, input().split())
dq = list(range(1, n+1))
dq = deque(dq)
result = []

while dq:
    for _ in range(k-1):
        cur = dq.popleft()
        dq.append(cur)
    result.append(dq.popleft())

print('<'+', '.join(map(str, result))+'>')
